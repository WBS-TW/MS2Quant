fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
subfolder
direct <- subfolder[1]
direct
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
file_name
comp_name
sir_fold <- as.numeric(file_name[[1]][1])
id_this <- as.numeric(file_name[[1]][3]) # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata
filedata <- as_tibble(t(filedata), .name_repair = "minimal")
filedata
for(direct in subfolder){
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- as.numeric(file_name[[1]][1])
id_this <- as.numeric(file_name[[1]][3]) # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata), .name_repair = "minimal")
filedata <- filedata %>%
mutate(predion = pred_ion) %>%
mutate(predion = as.character(sub("\\..*", "", predion))) %>%
mutate(id = id_this) %>%
mutate(sir_fol_nr = sir_fold) %>%
mutate(predform = as.character(sub("\\_.*", "", predion)))
fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
for(direct in subfolder){
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- as.numeric(file_name[[1]][1])
id_this <- as.numeric(file_name[[1]][3]) # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata))
filedata <- filedata %>%
mutate(predion = pred_ion) %>%
mutate(predion = as.character(sub("\\..*", "", predion))) %>%
mutate(id = id_this) %>%
mutate(sir_fol_nr = sir_fold) %>%
mutate(predform = as.character(sub("\\_.*", "", predion)))
fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
fingerprint_data
for(direct in subfolder){
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- as.numeric(file_name[[1]][1])
id_this <- as.numeric(file_name[[1]][3]) # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata), .name_repair = "unique")
filedata <- filedata %>%
mutate(predion = pred_ion) %>%
mutate(predion = as.character(sub("\\..*", "", predion))) %>%
mutate(id = id_this) %>%
mutate(sir_fol_nr = sir_fold) %>%
mutate(predform = as.character(sub("\\_.*", "", predion)))
fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
for(direct in subfolder){
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- as.numeric(file_name[[1]][1])
id_this <- as.numeric(file_name[[1]][3]) # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata), .name_repair = "make.names")
filedata <- filedata %>%
mutate(predion = pred_ion) %>%
mutate(predion = as.character(sub("\\..*", "", predion))) %>%
mutate(id = id_this) %>%
mutate(sir_fol_nr = sir_fold) %>%
mutate(predform = as.character(sub("\\_.*", "", predion)))
fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
fingerprint_data <- tibble()
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- as.numeric(file_name[[1]][1])
id_this <- as.numeric(file_name[[1]][3]) # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata
filedata <- as_tibble(t(filedata))
filedata
filedata <- as_tibble(t(filedata), .name_repair = "minimal")
filedata
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata), .name_repair = "minimal")
filedata
filedata <- as_tibble(t(filedata), .name_repair = "unique")
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata), .name_repair = "unique")
filedata
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
filedata <- as_tibble(t(filedata), .name_repair = "universal")
filedata <- as_tibble(t(filedata), .name_repair = "check_unique")
remove.packages("MS2Quant")
devtools::install_github("helensepman/MS2QuantTest"
,ref="main"
,INSTALL_opts="--no-multiarch"
,auth_token = "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")
devtools::install_github("kruvelab/MS2QuantTest"
,ref="main"
,INSTALL_opts="--no-multiarch"
,auth_token = "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")
?as.data.frame
remove.packages("MS2Quant")
install.packages(c("BBmisc", "BiocManager", "car", "classInt", "cli", "clue", "colourpicker", "commonmark", "conquer", "data.table", "datawizard", "dendextend", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "enviPat", "FactoMineR", "flexdashboard", "fontawesome", "formatR", "future", "future.apply", "gbm", "geometry", "gert", "ggbeeswarm", "ggforce", "ggpmisc", "ggpp", "ggpubr", "ggrepel", "ggsignif", "glmnet", "globals", "gmm", "gmp", "gower", "gtools", "h2o", "hardhat", "haven", "heatmaply", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "jpeg", "jsonlite", "klaR", "labelled", "latticeExtra", "lava", "lhs", "listenv", "lme4", "lpSolve", "lpSolveAPI", "lubridate", "magic", "MALDIquant", "maptools", "markdown", "MatrixModels", "matrixStats", "minqa", "multcomp", "ncdf4", "numbers", "openxlsx", "parallelly", "partitions", "party", "partykit", "pkgbuild", "pkgdown", "pkgload", "plotly", "pls", "plyr", "PMCMRplus", "png", "polyclip", "pracma", "progressr", "ps", "purrr", "qap", "quantreg", "R.cache", "R.utils", "ranger", "rbibutils", "rcdk", "rcdklibs", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reticulate", "rgl", "roxygen2", "rprojroot", "RSQLite", "rstatix", "Rttf2pt1", "sandwich", "scatterplot3d", "seriation", "sfsmisc", "shiny", "sp", "stringi", "strucchange", "styler", "Ternary", "testthat", "tibble", "tidyr", "timeDate", "TSP", "visNetwork", "waveslim", "webchem", "webshot", "whisker", "xfun", "xts", "yardstick", "yulab.utils", "zip", "zoo"))
install.packages(c("BBmisc", "BiocManager", "car", "classInt", "cli", "clue", "colourpicker", "commonmark", "conquer", "data.table", "datawizard", "dendextend", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "enviPat", "FactoMineR", "flexdashboard", "fontawesome", "formatR", "future", "future.apply", "gbm", "geometry", "gert", "ggbeeswarm", "ggforce", "ggpmisc", "ggpp", "ggpubr", "ggrepel", "ggsignif", "glmnet", "globals", "gmm", "gmp", "gower", "gtools", "h2o", "hardhat", "haven", "heatmaply", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "jpeg", "jsonlite", "klaR", "labelled", "latticeExtra", "lava", "lhs", "listenv", "lme4", "lpSolve", "lpSolveAPI", "lubridate", "magic", "MALDIquant", "maptools", "markdown", "MatrixModels", "matrixStats", "minqa", "multcomp", "ncdf4", "numbers", "openxlsx", "parallelly", "partitions", "party", "partykit", "pkgbuild", "pkgdown", "pkgload", "plotly", "pls", "plyr", "PMCMRplus", "png", "polyclip", "pracma", "progressr", "ps", "purrr", "qap", "quantreg", "R.cache", "R.utils", "ranger", "rbibutils", "rcdk", "rcdklibs", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reticulate", "rgl", "roxygen2", "rprojroot", "RSQLite", "rstatix", "Rttf2pt1", "sandwich", "scatterplot3d", "seriation", "sfsmisc", "shiny", "sp", "stringi", "strucchange", "styler", "Ternary", "testthat", "tibble", "tidyr", "timeDate", "TSP", "visNetwork", "waveslim", "webchem", "webshot", "whisker", "xfun", "xts", "yardstick", "yulab.utils", "zip", "zoo"))
install.packages(c("BBmisc", "BiocManager", "car", "classInt", "cli", "clue", "colourpicker", "commonmark", "conquer", "data.table", "datawizard", "dendextend", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "enviPat", "FactoMineR", "flexdashboard", "fontawesome", "formatR", "future", "future.apply", "gbm", "geometry", "gert", "ggbeeswarm", "ggforce", "ggpmisc", "ggpp", "ggpubr", "ggrepel", "ggsignif", "glmnet", "globals", "gmm", "gmp", "gower", "gtools", "h2o", "hardhat", "haven", "heatmaply", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "jpeg", "jsonlite", "klaR", "labelled", "latticeExtra", "lava", "lhs", "listenv", "lme4", "lpSolve", "lpSolveAPI", "lubridate", "magic", "MALDIquant", "maptools", "markdown", "MatrixModels", "matrixStats", "minqa", "multcomp", "ncdf4", "numbers", "openxlsx", "parallelly", "partitions", "party", "partykit", "pkgbuild", "pkgdown", "pkgload", "plotly", "pls", "plyr", "PMCMRplus", "png", "polyclip", "pracma", "progressr", "ps", "purrr", "qap", "quantreg", "R.cache", "R.utils", "ranger", "rbibutils", "rcdk", "rcdklibs", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reticulate", "rgl", "roxygen2", "rprojroot", "RSQLite", "rstatix", "Rttf2pt1", "sandwich", "scatterplot3d", "seriation", "sfsmisc", "shiny", "sp", "stringi", "strucchange", "styler", "Ternary", "testthat", "tibble", "tidyr", "timeDate", "TSP", "visNetwork", "waveslim", "webchem", "webshot", "whisker", "xfun", "xts", "yardstick", "yulab.utils", "zip", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
design <- FrF2(nfactors = 4, resolution = 4, factor.names = c("lemon_juice", "sugar_syrup", "water_tap", "mixing_time"))
library(FrF2) #allows you to create designs for experiments
design <- FrF2(nfactors = 4, resolution = 4, factor.names = c("lemon_juice", "sugar_syrup", "water_tap", "mixing_time"))
summary(design)
design <- design %>% unfactor()
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
design <- design %>% unfactor()
library(DoE.wrapper)
library(FrF2) #allows you to create designs for experiments
library(rsm) #Allows us to analyze interactions between factors
library(varhandle) # unfactoring the data
library(tidyverse)
setwd("C:/Users/karpa/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant")
#setwd("/GitHub/PFAS_semi_quant_HS")
source("code/functions.R")
library(caTools)
library(tidyverse)
library(caret)
library(plotly)
library(cowplot)
# mean error
logIE_pred_model_train_test <- readRDS(file="221205_model_PFAS_train_test_logIE.RData")
# mean error
logIE_pred_model_train_test <- readRDS(file="models/221205_model_PFAS_train_test_logIE.RData")
# mean error
logIE_pred_model_train_test <- readRDS(file="models/221205_model_PFAS_train_test_logIE.RData")
getwd()
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant")
# mean error
logIE_pred_model_train_test <- readRDS(file="/models/221205_model_PFAS_train_test_logIE.RData")
# mean error
logIE_pred_model_train_test <- readRDS(file="/221205_model_PFAS_train_test_logIE.RData")
getwd()
# mean error
logIE_pred_model_train_test <- readRDS(file="models/221205_model_PFAS_train_test_logIE.RData")
logIE_pred_model_train_test$metrics
logIE_pred_model_train_test$data
data <- logIE_pred_model_train_test$data
View(data)
data <- logIE_pred_model_train_test$data$test_set
logIE_pred_model_test_error_pfas <- logIE_pred_model_train_test$data$test_set %>%
filter(data_type == "PFAS") %>%
mutate(pred_error = case_when(10^logIE > 10^logIE_predicted ~ 10^logIE/10^logIE_predicted,
TRUE ~ 10^logIE_predicted/10^logIE))
View(logIE_pred_model_test_error_pfas)
mean(logIE_pred_model_test_error_pfas$pred_error)
View(logIE_pred_model_test_error_pfas)
# mean error
logIE_pred_model_train_test <- readRDS(file="models/221205_model_PFAS_allData_logIE.RData")
data <- logIE_pred_model_train_test$data$training_set
View(data)
wwtp_top5 <- read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/random/top5_all_samples.txt", delim = ";")
View(wwtp_top5)
wwtp_top5 <- read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/random/top5_all_samples.txt", delim = "\t")
View(wwtp_top5)
wwtp_top5 <- read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/random/top5_all_samples.txt", delim = "\t", skip = 4)
View(wwtp_top5)
y = 1_03_H_EF_blank)
y = "1_03_H_EF_blank")
y = wwtp_top5$1_03_H_EF_blank)
y = wwtp_top5$`1_03_H_EF_blank`)
wwtp_top5[12,]
wwtp_top5[,12]
wwtp_top5[,32]
wwtp_top5[,42]
ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_03_H_EF_blank`))
ggplot(data = wwtp_top5) +
geom_bar(mapping = aes(x = `Average Mz`,
y = `1_03_H_EF_blank`))
library(cowplot)
ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_16_H_IN_blank`))
p2 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_04_E_EF_blank`))+
geom_point(mapping = aes(x = `Average Mz`,
y = `1_17_E_IN_blank`), color = "red")
p2
p1 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_03_H_EF_blank`))+
geom_point(mapping = aes(x = `Average Mz`,
y = `1_16_H_IN_blank`), color = "red") +
scale_y_log10()
p1
ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_03_H_EF_blank`))+
geom_point(mapping = aes(x = `Average Mz`,
y = `1_16_H_IN_blank`), color = "red")
p1 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_03_H_EF_blank`))+
geom_point(mapping = aes(x = `Average Mz`,
y = `1_16_H_IN_blank`), color = "red") +
scale_y_log10()
p2 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_04_E_EF_blank`))+
geom_point(mapping = aes(x = `Average Mz`,
y = `1_17_E_IN_blank`), color = "red") +
scale_y_log10()
p3 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_05_F_EF_blank`))+
geom_point(mapping = aes(x = `Average Mz`,
y = `1_18_F_IN_blank`), color = "red") +
scale_y_log10()
plot_grid(p1, p2, p3 labels = c('H', 'E', 'F'))
plot_grid(p1, p2, p3, labels = c('H', 'E', 'F'))
plot_grid(p1, p2, p3, labels = c('H', 'E', 'F'), cols = 1)
p1 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_16_H_IN_blank`), color = "red") +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_03_H_EF_blank`))+
scale_y_log10()
p2 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_17_E_IN_blank`), color = "red") +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_04_E_EF_blank`))+
scale_y_log10()
p3 <- ggplot(data = wwtp_top5) +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_18_F_IN_blank`), color = "red") +
geom_point(mapping = aes(x = `Average Mz`,
y = `1_05_F_EF_blank`))+
scale_y_log10()
plot_grid(p1, p2, p3, labels = c('H', 'E', 'F'), cols = 1)
ggsave(plot, "C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/R_codes/gordian_wwtp/top5_H_E_F_IN_EF_intensity_comparison.svg")
plot <- plot_grid(p1, p2, p3, labels = c('H', 'E', 'F'), cols = 1)
ggsave(plot, "C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/R_codes/gordian_wwtp/top5_H_E_F_IN_EF_intensity_comparison.svg")
plot <- plot_grid(p1, p2, p3, labels = c('H', 'E', 'F'), cols = 1)
ggsave(plot, "C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/projects_measurements/R_codes/gordian_wwtp/top5_H_E_F_IN_EF_intensity_comparison.svg")
data <- read.csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/data_unified_IEs_all_filtered_20221121.csv")
data <- read.csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/data/data_unified_IEs_all_filtered_20221121.csv")
inchi <- data %>%
select(inchi) %>%
unique()
set.seed(123)
split_inchi <- sample.split(inchi$inchi, SplitRatio = 0.8)
inchi <- inchi %>%
mutate(split = split_inchi)
data <- data %>%
left_join(inchi)
# Distribution of data - normality test?
ggplot(data = data) +
geom_histogram(mapping = aes(x=as.numeric(unified_IEs)), bins = 45) +
facet_wrap(~split, scales="free_y") +
xlab(substitute(paste("log", italic("IE"))["unified"]))  +
my_theme
library(tidyverse)
library(caret)
library(caTools)
library(Metrics)
library(plotly)
library(cowplot)
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development")
source("SIRIUS_FP_function.R")
source("code/SIRIUS_FP_function.R")
source("code/functions.R")
library("FactoMineR")
library("factoextra")
# ---- theme ----
extrafont::loadfonts(device = "win")
font <- extrafont::choose_font("Quicksand")
fontsize <- 14
basecolor <- "#515251"
highlighter_color = "#7CB368" #"#728D68"
datapoints_color1 <- "#959D95"
datapoints_color2 <- "#728D68"
my_theme <-   theme(
plot.background = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
color = basecolor),
# plot.title = element_text(color = basecolor,
#                           size = 14,
#                           face = "bold"),
text = element_text(family = font,
size = fontsize,
color = basecolor),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
# strip.text = element_text(family = font,
#                           size = fontsize,
#                           color = basecolor),
legend.position = "none",
legend.title = element_blank(),
legend.text = element_text(family = font,
size = fontsize,
color = basecolor),
axis.text = element_text(family = font,
size = fontsize,
color = basecolor),
axis.ticks = element_blank(),
aspect.ratio = 1,
axis.title.x = element_text(hjust = c(1), vjust = c(0)),
axis.title.y = element_text(hjust = c(1), vjust = c(1))
)
data <- read.csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/data/data_unified_IEs_all_filtered_20221121.csv")
inchi <- data %>%
select(inchi) %>%
unique()
set.seed(123)
split_inchi <- sample.split(inchi$inchi, SplitRatio = 0.8)
inchi <- inchi %>%
mutate(split = split_inchi)
data <- data %>%
left_join(inchi)
# Distribution of data - normality test?
ggplot(data = data) +
geom_histogram(mapping = aes(x=as.numeric(unified_IEs)), bins = 45) +
facet_wrap(~split, scales="free_y") +
xlab(substitute(paste("log", italic("IE"))["unified"]))  +
my_theme
# ---- Cleaning SMILES ----
data_SMILES <- data %>%
select(SMILES) %>%
unique()
data <- read.csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/data/data_unified_IEs_all_filtered_20221121.csv")
inchi <- data %>%
select(inchi) %>%
unique()
set.seed(123)
split_inchi <- sample.split(inchi$inchi, SplitRatio = 0.8)
inchi <- inchi %>%
mutate(split = split_inchi)
data <- data %>%
left_join(inchi)
# ---- Cleaning SMILES ----
data_SMILES <- data %>%
select(SMILES) %>%
unique()
#Some weird SMILES that give error in calculation?
# Delete these SMILES from the SMILES list
data_SMILES <- data_SMILES %>% #[-c(1542, 1543),]
filter(SMILES != "CCOC(=O)C(=CNC(CSSCC(NC=C(C(=O)OCC)C(=O)OCC)C(=O)O)C(=O)O)C(=O)OCC",
SMILES != "CCOC(=O)C(=CNC(CC1=CNC=[N]1C)C(=O)O)C(=O)OCC")
# ----  MAP4 ----
#calculated on a Linux-based VM, read in here:
descr_map4 <- read_delim("code/MAP4fingerprints.csv", delim = ",", col_names = FALSE)
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development")
# ----  MAP4 ----
#calculated on a Linux-based VM, read in here:
descr_map4 <- read_delim("code/MAP4fingerprints.csv", delim = ",", col_names = FALSE)
smiles_map4 <- read_delim("code/MAP4fingerprints_smiles.csv", delim = ",", col_names = FALSE)
colnames(smiles_map4) <- c("SMILES")
descr_map4 <- smiles_map4 %>%
bind_cols(descr_map4)
descr_map4 <- data_SMILES %>%
left_join(descr_map4)
View(descr_map4)
library(tidyverse)
library(tidyverse)
library(caret)
library(caTools)
library(Metrics)
library(plotly)
library(cowplot)
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development")
source("code/functions.R")
library("FactoMineR")
library("factoextra")
# ---- theme ----
extrafont::loadfonts(device = "win")
font <- extrafont::choose_font("Quicksand")
fontsize <- 14
basecolor <- "#515251"
highlighter_color = "#7CB368" #"#728D68"
datapoints_color1 <- "#959D95"
datapoints_color2 <- "#728D68"
my_theme <-   theme(
plot.background = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
color = basecolor),
# plot.title = element_text(color = basecolor,
#                           size = 14,
#                           face = "bold"),
text = element_text(family = font,
size = fontsize,
color = basecolor),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
# strip.text = element_text(family = font,
#                           size = fontsize,
#                           color = basecolor),
legend.position = "none",
legend.title = element_blank(),
legend.text = element_text(family = font,
size = fontsize,
color = basecolor),
axis.text = element_text(family = font,
size = fontsize,
color = basecolor),
axis.ticks = element_blank(),
aspect.ratio = 1,
axis.title.x = element_text(hjust = c(1), vjust = c(0)),
axis.title.y = element_text(hjust = c(1), vjust = c(1))
)
data <- read.csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/data/data_unified_IEs_all_filtered_20221121.csv")
inchi <- data %>%
select(inchi) %>%
unique()
set.seed(123)
split_inchi <- sample.split(inchi$inchi, SplitRatio = 0.8)
inchi <- inchi %>%
mutate(split = split_inchi)
data <- data %>%
left_join(inchi)
# Distribution of data
ggplot(data = data) +
geom_histogram(mapping = aes(x=as.numeric(unified_IEs)), bins = 45) +
facet_wrap(~split, scales="free_y") +
xlab(substitute(paste("log", italic("IE"))["unified"]))  +
my_theme
# ---- Cleaning SMILES ----
data_SMILES <- data %>%
select(SMILES) %>%
unique()
descr_padel <- PaDEL_original(data_SMILES)
descr_padel <- PaDEL_original(data_SMILES)
data <- read.csv("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/data/data_unified_IEs_all_filtered_20221121.csv")
inchi <- data %>%
select(inchi) %>%
unique()
set.seed(123)
split_inchi <- sample.split(inchi$inchi, SplitRatio = 0.8)
inchi <- inchi %>%
mutate(split = split_inchi)
data <- data %>%
left_join(inchi)
# Distribution of data
ggplot(data = data) +
geom_histogram(mapping = aes(x=as.numeric(unified_IEs)), bins = 45) +
facet_wrap(~split, scales="free_y") +
xlab(substitute(paste("log", italic("IE"))["unified"]))  +
my_theme
# ----  PaDEL descriptors ----
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/MS2Quant/development/code")
descr_padel <- PaDEL_original(data_SMILES)
descr_mordred <- Mordred_descriptors(data_SMILES)
descr_morgan <- Morgan2_descriptors(data_SMILES)
descr_mordred <- Mordred_descriptors(data_SMILES)
# ----  MAP4 ----
#calculated on a Linux-based VM, read in here:
descr_map4 <- read_delim("code/MAP4fingerprints.csv", delim = ",", col_names = FALSE)
smiles_map4 <- read_delim("code/MAP4fingerprints_smiles.csv", delim = ",", col_names = FALSE)
# ----  MAP4 ----
#calculated on a Linux-based VM, read in here:
descr_map4 <- read_delim("MAP4fingerprints.csv", delim = ",", col_names = FALSE)
smiles_map4 <- read_delim("MAP4fingerprints_smiles.csv", delim = ",", col_names = FALSE)
colnames(smiles_map4) <- c("SMILES")
descr_map4 <- smiles_map4 %>%
bind_cols(descr_map4)
descr_map4 <- data_SMILES %>%
left_join(descr_map4)
descr_rcdk <- rcdk_fingerprints(data_SMILES)
SIRIUS_descriptors <- Fingerprint_calc(data_SMILES)
SIRIUS_descriptors <- Fingerprint_calc(data_SMILES[10,])
# NB! filter out the FPs that SIRIUS actually does not calculate!!
sirius_true_FP_pos <- read_delim("csi_fingerid.tsv",
delim = "\t")
sirius_true_FP_neg <- read_delim("csi_fingerid_neg.tsv",
delim = "\t")
# NB! filter out the FPs that SIRIUS actually does not calculate!!
sirius_true_FP_pos <- read_delim("csi_fingerid.tsv",
delim = "\t")
col_names_calcSirius_pos <- as.vector(paste("Un", sirius_true_FP_pos$absoluteIndex, sep = ""))
col_names_calcSirius_neg <- as.vector(paste("Un", sirius_true_FP_neg$absoluteIndex, sep = ""))
col_names_calcSmiles <- colnames(SIRIUS_descriptors)
intersection <- intersect(col_names_calcSirius_pos, col_names_calcSirius_neg)
intersection <- intersect(col_names_calcSirius_pos, col_names_calcSirius_neg)
intersection <- intersect(intersection, col_names_calcSmiles)
intersection <- append("SMILES", intersection)
sessionInfo()
