ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'lightblue', color = 'purple'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'lightblue'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'white'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'lightgreen'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'lightgreen'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'grey'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = 'lightgrey'))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1)
#write your code here - together in the lab + change color
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery)) +
ylim(0, 1.2) +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red") +
theme(aspect.ratio = 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
library(rstatix)
#importing the data
dataset =  read_delim('Neale2018_SI_summary.csv',
delim = ',',
locale = locale(decimal_mark = '.'),
col_names = TRUE,
trim_ws = TRUE)
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1)
#write your code here - together in lab
regressor_recovery_logKow_relation <- dataset %>%
lm(recovery ~ logKow_ACD, data = .)
regressor_recovery_logKow_relation
regressor_recovery_logKow_relation %>%
summary()
#write your code here - together in the lab + change color
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery)) +
ylim(0, 1.2) +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red") +
theme(aspect.ratio = 1)
#write your code here - together in the lab + change color
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery)) +
ylim(0, 1.2) +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1) +
theme(aspect.ratio = 1)
# write your code here
regressor_recovery_logKow_relation_robust = dataset %>%
MASS::rlm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_relation_robust
regressor_recovery_logKow_relation_robust %>%
summary()
#write your code here - independent
regressor_recovery_logKow_relation_without_outliers = dataset_without_outliers %>%
lm(recovery ~ logKow_ACD,
data = .)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
library(rstatix)
#importing the data
dataset =  read_delim('Neale2018_SI_summary.csv',
delim = ',',
locale = locale(decimal_mark = '.'),
col_names = TRUE,
trim_ws = TRUE)
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
ylim(0, 1.2) +
theme(aspect.ratio = 1)
#write your code here - together in lab
regressor_recovery_logKow_relation <- dataset %>%
lm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_relation
regressor_recovery_logKow_relation %>%
summary()
#write your code here - together in the lab + change color
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery)) +
ylim(0, 1.2) +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1) +
theme(aspect.ratio = 1)
# write your code here
regressor_recovery_logKow_relation_robust = dataset %>%
MASS::rlm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_relation_robust
regressor_recovery_logKow_relation_robust %>%
summary()
#write your code here - independent
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery)) +
ylim(0, 1.2) +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1]) +
geom_abline(slope = regressor_recovery_logKow_relation_robust$coefficients[2],
intercept = regressor_recovery_logKow_relation_robust$coefficients[1],
color = "blue") +
theme(aspect.ratio = 1)
#write your code here - independently
anova_test(regressor_recovery_logKow_relation_robust, detailed = TRUE)
#write your code here -independent
dataset_without_outliers =  read_delim('Neale2018_SI_summary_without_outliers.csv',
delim = ',',
locale = locale(decimal_mark = '.'),
col_names = TRUE,
trim_ws = TRUE)
# Write your code here
#write your code here - independent
regressor_recovery_logKow_relation_without_outliers = dataset_without_outliers %>%
lm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_relation_without_outliers
#write your code here - independent
regressor_recovery_logKow_relation_without_outliers = dataset_without_outliers %>%
lm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_relation_without_outliers
regressor_recovery_logKow_relation_without_outliers %>%
summary()
knitr::opts_chunk$set(echo = TRUE)
#importing the data
dataset = read_delim("Neale2018_SU_summary.csv")
#importing the data
dataset = read_delim("Neale2018_SI_summary.csv")
View(dataset)
#write your code here
ggplot(data = dataset) + geom_point(mapping = aes(x = logKow_ACD, y = recovery))
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery)) +
theme(aspect.ratio = 1)
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 2,
alpha = 0.5)) +
theme(aspect.ratio = 1)
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1)
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = none())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = element_blank())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1)
?theme
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.key = element_blank())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = element_blank())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
#write your code here
regressor_recovery_logKow_relation = dataset %>%
lm(recovery ~ logKow_ACD)
#write your code here
regressor_recovery_logKow_relation = dataset %>%
lm(recovery ~ logKow_ACD,
data = .)
View(regressor_recovery_logKow_relation)
regressor_recovery_logKow_relation
regressor_recovery_logKow_relation %>%
summary()
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
?geom_abline
regressor_recovery_logKow_relation
regressor_recovery_logKow_relation$coefficients
regressor_recovery_logKow_relation$coefficients[2]
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1])
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red")
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5,
color = "blue")) +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5),
color = "blue") +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1)
# write your code here
regressor_recovery_logKow_robust_relation = dataset %>%
MASS::rlm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_robust_relation
regressor_recovery_logKow_robust_relation
regressor_recovery_logKow_relation
regressor_recovery_logKow_robust_relation %>%
summary()
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1) +
geom_abline(slope = regressor_recovery_logKow_robust_relation$coefficients[2],
intercept = regressor_recovery_logKow_robust_relation$coefficients[1],
color = "green",
size = 1)
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1) +
geom_abline(slope = regressor_recovery_logKow_robust_relation$coefficients[2],
intercept = regressor_recovery_logKow_robust_relation$coefficients[1],
color = "blue",
size = 1)
#write your code here
anova_test(regressor_recovery_logKow_robust_relation)
#write your code here
anova_test(regressor_recovery_logKow_robust_relation,
detailed = TRUE)
#write your code here
anova_test(regressor_recovery_logKow_robust_relation)
regressor_recovery_logKow_relation %>%
summary()
regressor_recovery_logKow_robust_relation
regressor_recovery_logKow_robust_relation %>%
summary()
# Write your code here
dataset_without_outliers = read_delim("Neale2018_SI_summary_without_outliers.csv")
View(dataset_without_outliers)
#write your code here
dataset_without_outliers = read_delim("Neale2018_SI_summary_without_outliers.csv",
delim = ",")
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none") +
ylim(0, 1.2)
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none") +
ylim(0, 1.5)
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none") +
ylim(0, 1.2)
#write your code here
regressor_recovery_logKow_without_outliers_relation = dataset_without_outliers %>%
lm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_without_outliers_relation
regressor_recovery_logKow_without_outliers_relation %>%
summary()
MY_NEW_DATASET <- data.frame(
logKow_ACD = c(12, 19, 24)
)
View(MY_NEW_DATASET)
remove.packages("MS2Quant")
devtools::install_github("kruvelab/MS2Quant",
ref="main",
INSTALL_opts="--no-multiarch")
library(MS2Quant)
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
path_suspects_sirius_project_folder)
# Separate calibration plots for each calibrant
MS2Quant_quantification_results$calibrants_separate_plots
# Calibration plot between experimental logRF and logIE
MS2Quant_quantification_results$logIE_logRF_calibration_plot
# Summary of the linear model between logRF and logIE
MS2Quant_quantification_results$calibration_linear_model_summary
# All suspect concentrations
MS2Quant_quantification_results$suspects_concentrations
# Date when the quantification was done
MS2Quant_quantification_results$date
cal = tibble(SMILES = c("CCC", "CC"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 30)
cal = tibble(SMILES = c("CCC", "CC"))
library(tidyverse)
cal = tibble(SMILES = c("CCC", "CC"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 30)
View(IE_pred)
cal = tibble(SMILES = c("C=CCOC(CN1C=CN=C1)C2=C(C=C(C=C2)Cl)Cl.OS(=O)(=O)O", "CC(C)Cc1ccc(cc1)C(C)C(=O)O"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 30)
data = IE_pred$chemicals_predicted_IEs
View(data)
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 80)
data = IE_pred$chemicals_predicted_IEs
devtools::install_github("kruvelab/MS2Quant",
ref="main",
INSTALL_opts="--no-multiarch")
library(MS2Quant)
library(tidyverse)
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
path_suspects_sirius_project_folder)
View(isotopes)
View(MS2Quant_quantification_results)
MS2Quant_quantification_results$suspects_concentrations
cal = tibble(SMILES = c("C=CCOC(CN1C=CN=C1)C2=C(C=C(C=C2)Cl)Cl.OS(=O)(=O)O",
"CC(C)Cc1ccc(cc1)C(C)C(=O)O"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 80)
data = IE_pred$chemicals_predicted_IEs
View(data)
IE_pred = MS2Quant_predict_IE(path_dataframe_calibrants_suspects,)
IE_pred = MS2Quant_predict_IE(chemicals_for_IE_prediction = path_dataframe_calibrants_suspects,
eluent = path_eluent_file,
organic_modifier = "MeCN",
organic_percentage = 80,
pH_aq = 2.7,
fingerprints = path_suspects_sirius_project_folder)
data = IE_pred$chemicals_predicted_IEs
View(data)
cal = tibble(SMILES = c("CN1C=NC2=C1C(=O)N(C(=O)N2C)C",
"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 80)
data = IE_pred$chemicals_predicted_IEs
View(IE_pred)
remotes::install_github("kruvelab/MS2Tox", INSTALL_opts="--no-multiarch")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rdisop")
remotes::install_github("kruvelab/MS2Tox", INSTALL_opts="--no-multiarch")
